Design work
===========

Stats
- follow the progress of various requests, might need a standardised way to
  extract this information from a Proc
- check out google's windowed availability thing, and see how to fit it into
  this framework for general requests & protocols

Execution
- implement p4p-rt-quic as described in P4P.Proc.Stream
- implement pure adapter from Proc to SProc, and a composition operator for it

Later
-----

Abstractions
- how to compose procs together, e.g. for a protocol with multiple subprotocols
- how to deal with storage, e.g. disk access


Technical debt
==============

! LogAuxLoHiEnv, switch Lo/Hi around
! pass logger into RTLoIO/RTHiIO
- compress range of ticks when recording/replaying
- update crypto interface


Low-level features
==================

Stats
- SizedMessage typeclass
- general stats:
  - messages & their size, between which neighbours, during which ticks
  - add a command to request debug info

Execution
! make sure we hFlush output files after a crash, test this
- --imsg-resume and --omsg-resume -- when --ostate-w is set, instead of
  writing the state only at the end, periodically write it out, and use
  the resume files to store messages in case we crash during a period.
  will probably need to implement crash-proof file-replace and file-append
- rere AuxO for Sim, so we can see what individual procs send/recv


High-level features
===================

- view network topology, either:
  - explicit - nodes would have to tell this to us
  - implicit - we determine this by messages passed between nodes

- view/trace the progress of a request as it propagates through the network:
  - nodes should update us with this information, devise a generic framework
    for doing this for different protocols
  - animate this in a video or gif?

- large scale:
  - set up a particular topology
  - test whether nodes are able to self-organise within this topology
  - test how resilient a topology is, under random faults and hostile attack
