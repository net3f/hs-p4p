Design work
===========

Stats
- follow the progress of various requests, might need a standardised way to
  extract this information from a Proc
- check out google's windowed availability thing, and see how to fit it into
  this framework for general requests & protocols

Execution
- implement adapter from Proc to SProc
- implement p4p-rt, p4p-rt-quic as described in P4P.Proc.Stream

Later
-----

Abstractions
- how to compose procs together, e.g. for a protocol with multiple subprotocols
- how to deal with storage, e.g. disk access


Technical debt
==============

- RT logging should log (certain) inputs as well as outputs
- envReact should take initial `i` and retain it from the env as State, instead of `p -> m i`
- RT: when resuming, implement the ability to "skip forward" tickNow to the current system time
  --init-recv-addr --init-ms-per-tick --resume-system-time
- update crypto interface


Low-level features
==================

Stats
- SizedMessage typeclass
- general stats:
  - messages & their size, between which neighbours, during which ticks
  - add a command to request debug info

Execution
- rere AuxO for Sim, so we can see what individual procs send/recv


High-level features
===================

- view network topology, either:
  - explicit - nodes would have to tell this to us
  - implicit - we determine this by messages passed between nodes

- view/trace the progress of a request as it propagates through the network:
  - nodes should update us with this information, devise a generic framework
    for doing this for different protocols
  - animate this in a video or gif?

- large scale:
  - set up a particular topology
  - test whether nodes are able to self-organise within this topology
  - test how resilient a topology is, under random faults and hostile attack
