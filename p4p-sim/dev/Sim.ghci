#!/usr/bin/ghci -ghci-script

:load p4p-sim/app/Sim.hs
:set -XOverloadedStrings
:set -XPolyKinds
:set -XTypeFamilies
:set -XScopedTypeVariables

import P4P.Sim
import System.Random

import Data.Sequence as Seq
import Data.Sequence.Extra as Seq
import P4P.Protocol.DHT.Kademlia.Message
import P4P.Protocol.DHT.Kademlia.Internal

let newId = getStdRandom (randomR (minBound, maxBound)) :: IO Word64
let writeIn wi pid cmd = newId >>= (\i -> wi $ Just $ pid :~ Command (mkDummyId 32 (show i)) cmd)

-- need explicit type annot due to https://gitlab.haskell.org/ghc/ghc/issues/18007
-- SKad :=> (SimTBHandles wi ro fin :: SimTBHandles Pid (KState ChaChaDRGInsecure)) <- runTB =<< parseOptions ["-pProtoKad", "-v", "-n4"]
-- writeIn wi 1 $ JoinNetwork (NodeInfo {niNodeId = mkDummyId 32 "0", niNodeAddr = BSeq {unBSeq = Seq.fromList ["0"]}})
-- writeIn wi 2 $ JoinNetwork (NodeInfo {niNodeId = mkDummyId 32 "1", niNodeAddr = BSeq {unBSeq = Seq.fromList ["1"]}})
-- writeIn wi 3 $ JoinNetwork (NodeInfo {niNodeId = mkDummyId 32 "2", niNodeAddr = BSeq {unBSeq = Seq.fromList ["2"]}})

-- above is:
-- MsgUser (1 :~ Command {cmdId = "-------------------------------1", cmdBody = JoinNetwork (NodeInfo {niNodeId = "                               0", niNodeAddr = BSeq {unBSeq = fromList ["0"]}})})
-- MsgUser (2 :~ Command {cmdId = "-------------------------------2", cmdBody = JoinNetwork (NodeInfo {niNodeId = "                               1", niNodeAddr = BSeq {unBSeq = fromList ["1"]}})})
-- MsgUser (3 :~ Command {cmdId = "-------------------------------3", cmdBody = JoinNetwork (NodeInfo {niNodeId = "                               2", niNodeAddr = BSeq {unBSeq = fromList ["2"]}})})
